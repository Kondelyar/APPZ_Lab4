// <auto-generated />
using System;
using ContentLibrary.DAL.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace АППЗ_Lab4.Migrations
{
    [DbContext(typeof(ContentLibraryDbContext))]
    partial class ContentLibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ContentLibrary.DAL.Models.ContentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Format")
                        .HasColumnType("int");

                    b.Property<decimal>("Size")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ContentItem");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ContentLibrary.DAL.Models.ContentStorage", b =>
                {
                    b.Property<int>("ContentItemId")
                        .HasColumnType("int");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ContentItemId", "StorageId");

                    b.HasIndex("StorageId");

                    b.ToTable("ContentStorages");
                });

            modelBuilder.Entity("ContentLibrary.DAL.Models.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Capacity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<decimal>("UsedSpace")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("ContentLibrary.DAL.Models.Audio", b =>
                {
                    b.HasBaseType("ContentLibrary.DAL.Models.ContentItem");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("ContentLibrary.DAL.Models.Book", b =>
                {
                    b.HasBaseType("ContentLibrary.DAL.Models.ContentItem");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("ContentLibrary.DAL.Models.Document", b =>
                {
                    b.HasBaseType("ContentLibrary.DAL.Models.ContentItem");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("ContentItem", t =>
                        {
                            t.Property("Author")
                                .HasColumnName("Document_Author");
                        });

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("ContentLibrary.DAL.Models.Video", b =>
                {
                    b.HasBaseType("ContentLibrary.DAL.Models.ContentItem");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.ToTable("ContentItem", t =>
                        {
                            t.Property("Duration")
                                .HasColumnName("Video_Duration");
                        });

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("ContentLibrary.DAL.Models.ContentStorage", b =>
                {
                    b.HasOne("ContentLibrary.DAL.Models.ContentItem", "ContentItem")
                        .WithMany("ContentStorages")
                        .HasForeignKey("ContentItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContentLibrary.DAL.Models.Storage", "Storage")
                        .WithMany("ContentStorages")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentItem");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("ContentLibrary.DAL.Models.ContentItem", b =>
                {
                    b.Navigation("ContentStorages");
                });

            modelBuilder.Entity("ContentLibrary.DAL.Models.Storage", b =>
                {
                    b.Navigation("ContentStorages");
                });
#pragma warning restore 612, 618
        }
    }
}
